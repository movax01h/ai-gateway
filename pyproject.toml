[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "ai_gateway"
version = "0.1.0"
dynamic = ["dependencies"]
requires-python = ">=3.12.0,<3.13.0"
description = "A service that gives access to GitLab AI features"
authors = [{ name = "GitLab Engineering", email = "engineering@gitlab.com" }]
readme = "README.md"

[project.scripts]
ai_gateway = "ai_gateway.main:run_app"
ai-gateway = "ai_gateway.main:run_app"
validate-model-selection-config = "ai_gateway.model_selection:validate_model_selection_config"
eval = "eval.main:main"
generate-dataset = "eval.generate_dataset:main"
index_docs = "ai_gateway.scripts.index_docs_as_sqlite:build_indexed_docs"
troubleshoot = "ai_gateway.scripts.troubleshoot_selfhosted_installation:troubleshoot"
compute-tps = "ai_gateway.scripts.tps_test:compute_tps"
duo-workflow-service = "duo_workflow_service.server:run"
apply-security = "duo_workflow_service.security.prompt_security:run_from_args"

[tool.poetry.dependencies]
fastapi = "^0.115.2"
dependency-injector = "^4.41.0"
uvicorn = { extras = ["standard"], version = "^0.34.0" }
requests = "^2.32.3"
numpy = "^2.2.3"
python-dotenv = "^1.0.1"
fastapi-health = "^0.4.0"
google-cloud-aiplatform = "^1.36.4"
structlog = "^25.0.0"
asgi-correlation-id = "^4.1.0"
prometheus-fastapi-instrumentator = "^7.0.0"
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
starlette-context = "^0.4.0"
google-cloud-profiler = "^4.1.0"
py-grpc-prometheus = "^0.8.0"
tree-sitter = "^0.21.0"
transformers = "^4.37.2"
snowplow-tracker = "^1.0.3"
anthropic = "^0.57.0"
pydantic = "^2.7.4"
pydantic-settings = "^2.1.0"
starlette = "^0.46.0"
httpx = "^0.28.0"
prometheus-client = "^0.22.0"
tree-sitter-languages = "^1.10.2"
jinja2 = "^3.1.3"
pyyaml = "^6.0.2"
google-cloud-discoveryengine = "^0.13.0"
litellm = "^1.35.20"
langgraph = "0.4.8"
langchain-anthropic = "^0.3.17"
langchainhub = "^0.1.20"
langchain-community = "^0.3.5"
boto3 = "^1.35.37"
python-gitlab = "^6.0.0"
unique-names-generator = "^1.0.2"
langchain-google-vertexai = "^2.0.8"
gitlab-cloud-connector = { version = "^3.0.0", source = "gitlab_cloud_connector" }
sse-starlette = "^2.1.3"
q_developer_boto3 = { path = "./vendor/q_developer_boto3-1.12.0-py3-none-any.whl" }
poetry-core = "^2.0.1"
google-auth = "^2.38.0"
grpcio-tools = "^1.64.1"
grpcio = "^1.68.1"
grpcio-reflection = "^1.64.1"
sentry-sdk = "^2.17.0"
websockets = "^15.0.1"
langgraph-checkpoint = "2.0.26"
gitmatch = "^0.2.1"

[[tool.poetry.source]]
name = "gitlab_cloud_connector"
url = "https://gitlab.com/api/v4/projects/58733651/packages/pypi/simple"
priority = "supplemental"

[[tool.poetry.source]]
name = "cef"
url = "https://gitlab.com/api/v4/projects/46678122/packages/pypi/simple"
priority = "supplemental"

[tool.poetry.group.eval]
optional = true

[tool.poetry.group.eval.dependencies]
cef = { version = "^0.4.1", source = "cef" }
typer = "^0.16.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"
responses = "^0.25.0"
pytest-cov = "^6.0.0"
pytest-asyncio = "^1.0.0"
pylint = "^3.0.3"
astroid = "^3.0.2"
pytest-watcher = "^0.4.2"
pytest-randomly = "^3.15.0"
pytest-xdist = "^3.6.1"
pyfakefs = "^5.6.0"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
flake8 = "^7.0.0"
isort = ">=5.12.0, <6.0.0"
black = "^25.0.0"
pylint = "^3.0.3"
astroid = "^3.0.2"
mypy = "^1.9.0"
types-pyyaml = "^6.0.12.20240311"
types-protobuf = "^4.25.0.20240417"
types-requests = "^2.31.0.20240406"
codespell = "^2.4.1"
docformatter = "^1.7.7"
editorconfig-checker = "^3.2.1"

[tool.codespell]
skip = """
*.db,\
*.excalidraw,\
*.js.map,\
*.png,\
*.pyc,\
./bin,\
./htmlcov,\
./tmp,\
./vendor,\
Gemfile.lock,\
node_modules,\
package-lock.json,\
poetry.lock
"""
ignore-words-list = "astroid"
ignore-multiline-regex = "codespell:ignore-begin.*\n.*codespell:ignore-end"

[tool.pytest.ini_options]
addopts = "--disable-warnings"
testpaths = ["tests"]
filterwarnings = ["error::UserWarning"]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = [
  "ai_gateway",
  "duo_workflow_service",
  "eval",
  "lib",
  "lints",
]
omit = [
  "tests/*",
  "*.jinja",
]

[tool.isort]
profile = "black"

[tool.pylint.main]
extension-pkg-allow-list = ["dependency_injector"]
# Exclude protobuf packages because they can't be parsed properly by pylint, leading to `no-name-in-module` errors.
# See https://github.com/protocolbuffers/protobuf/issues/10372
ignored-modules=["contract.contract_pb2", "google.protobuf.struct_pb2", "google.rpc.error_details_pb2"]
jobs = 0
load-plugins = [
  "lints.unsafe_dependency_resolution",
  "lints.direct_environment_variable_reference",
  "lints.file_naming_for_tests",
]

[tool.pylint.format]
max-args = 17
max-attributes = 10
max-line-length = 120
max-locals = 30
max-positional-arguments = 17
max-statements = 65

[tool.pylint.messages_control]
disable = [
  "missing-module-docstring",
  "missing-function-docstring",
  "missing-class-docstring",
  "too-few-public-methods",
  "no-member",
  "fixme",
  "protected-access",
  "no-name-in-module",
  "arguments-differ",
  "unspecified-encoding",
  "redefined-builtin",
  "arguments-renamed",
  "raise-missing-from",
  "too-many-ancestors",
  "abstract-method",
  "broad-exception-caught",
  "duplicate-code",
]
enable = [
  "unsafe-dependency-resolution",
  "direct-environment-variable-reference",
]

[tool.pylint.reports]
score = "no"

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = false
disable_error_code = "annotation-unchecked"

[tool.docformatter]
wrap-summaries = 120
wrap-descriptions = 120
