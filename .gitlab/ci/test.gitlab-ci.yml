tests:unit:
  extends: .poetry
  stage: test
  needs:
    - install
  script:
    - make test-coverage-ci
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    expire_in: 1 weeks
    reports:
      junit:
        - .test-reports/*.xml
      coverage_report:
        coverage_format: cobertura
        path: .test-reports/coverage.xml
  variables:
    # Enabling debug mode of asyncio so that the test fails in the following cases:
    # - asyncio checks for coroutines that were not awaited and logs them; this mitigates the “forgotten await” pitfall.
    # - Many non-threadsafe asyncio APIs (such as loop.call_soon() and loop.call_at() methods) raise an exception if they are called from a wrong thread.
    PYTHONASYNCIODEBUG: "True"

tests:integration:
  extends: .poetry
  stage: test
  needs:
    - build-docker-model-gateway
  services:
    - name: ${TARGET_IMAGE}
      alias: ai-gateway
  variables:
    AIGW_SELF_SIGNED_JWT__SIGNING_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC+ErJOBYMe4/d5\nlcVtqnQEazhGYqyefHQNtfpzQyb/WuPJa5BZu68KeS0fWKcZJluNk/jGXSb3cvei\n28wtnbBlEOdTTOzMpP217rLtoYdnzgJfO7DLj3tUL+JbQHj51bLwgkrHlALFDoUt\nzWaOrs+WO6QVLnIsl+YZ6CrKpc9fXLtlvZp0yYuic1BxKCw8Q2lWjMhj6w1fubwM\ne3MsTMcgBV5ek3twY/vHkU/Q2gjniLZSTBmzaXrHjfbS1au2vQBTsKmtPDATrnTU\nVLxLvAtb7p3bZAZObIj4oDi+2qGQGDoWVaiGYXfRquKHdle7hBLwuvOlmVGAdfHd\nN18QO9kbAgMBAAECggEAQpdJScVrnThv/PRocVXtBJlN43bxlCr0+9K8NoKZ2I/O\ny0P4lD+JgUlX8in8jPafz7e+SjzbiIkKUk/gNkEPSjFEYi5Krh3F12YT4OYdCtSl\nhxjiBUc1BZcrHh415A2m/dUf/tEPsVs3dIcIPcfn6XHmuBcIIDBtiLkKuOmjf/xh\n/2l7QUHNC0Hn1STNvE5CscnqH0/s9dw2/KYhjpZWJsoNOAJ4PWgypxlftdUcspQK\nQL+FWrNL+aa1+nPeR0ArNw3nlkKnzcX3DmIHyD4az1IwrzHqMCh1zv16eqmCBYuN\nn2QrAAkAt+SFVEwjejwN/lNLMg4O6tyMvFnuOddp2QKBgQDhXgmOZgoJJYz7Vd0u\n/U3E4Ma+HysQ7TU3utidAke5YJXSms0UJrOFxgcRKserkXjD9wbyeUcMbrKRNTxm\nPgjGayVCqVc6T3kMHio8CvSs+RYt+jR7CnFIfQbQATR7c8nzy4Z/JNsW213SmXpj\n4S3TQWwGFSrF8h+A098cgFwNGQKBgQDX6IvIumrnQGiCJn8qQW3hKGfJwSl6/e4Z\nfC/o8uFzTtV1aL39AusDKAt4c5DsVUHCZLSH5acFGeeGt4dePpqnr0dpIb02ByGJ\na6tLJm2RwjaiXFOAsedOP12yqTZELi7rinKjVqG50eOvXuV40CVVP9qXzxE9e2DP\nQGe2ZFmqUwKBgFvsCkPNtOw0J8PgKt5erRjPgeDMP7mgtyMrD+1Cn9Sp45JKV7mP\na4v10K4c3+JH7JUprei6tNMKV8VIjIE7bkLYMxN0lMKQ5dOefiWNZm0jD/vi4QMK\nqFgjvuKaiziLauUIr6wucTpqcWNT/Iq+rv1K4u+8NH0Wm+jlAkzSwjkJAoGAG5Wd\nTk7q25KyB3bNpmNnm22jHPatywXoRp9EK7nkLewzf2WbaFjYF7YlCQWSzW7zENf2\n7KndldxCZUbLZ7IN5kCRmg/ycZWlpj34S4ikVQwAGOw8yuNvzuJvoSTXRwyzd+pf\nTRkDXo8/TKeOH8pQCr02u1B8PmOl8bSjy3y0q/sCgYAkdWZ6xLJeS9HlzuuXchl3\numZM4n88lad2yNoCu3aJs2fbVCGCiHyFsThluDU0KD3xE5+RZVpAMTErcCE3HqNK\nn1rbBNBVtUTKeu1Qkw0B1X813oH7omqmZVGJx+hceIKimjKWvD7hQlr90NPoFDFz\n0Laqissu1lxAspLYIulpWg==\n-----END PRIVATE KEY-----"
    AIGW_SELF_SIGNED_JWT__VALIDATION_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC5wpUNTuvvZeDn\nDF7BHxPQGNT+b8abaBLzRXB7HU0pKxUqW35BhEBrhbs4ahntOTx4LWTk/rPcaohU\n3jVXVe0luTHqsXqj0uqBhdbC161Bey2gwZUszN94l59n/hzSy9dWjN4g9ZaV8Qcq\nWAsGo/NiIHTp2BkmPSL3yedQXkZpUYEIpQpC8T3MozA3fGla8OveCf5UiEbYmKgA\nu+h9efeTLJD08QXOgAiI3OVvUwKsNeCiyYj2Xufp1dW9SdYN05PNxxQEPMLwwV0A\nfwn1SZL7naaCvoiy3IIr7lY9NAxboAhzSQFOmIOw4kXjju6d2HmUytzxHlsjZp5A\ngRTPLweJAgMBAAECggEAFUAcj4twA7DGr//TBipBOLzifuH4GTaodlKDCd6CAXvn\nfbM+SA3yVaqUjqFaqm/yCjh9MpItrsE0K+tItF9E1BwxyOy5QC0EfUE7nooQTK2j\n/GAw6dFdHj1QM9QW5YmCrqjKT4Bw0+HhJTexuTZ/xQG8BjVduSlkyu56yw+h4/HH\n2FqjwPj5DTtZj5qrW1ywJCkBcGkVv87ml64evOX9PQPhsu0UpSoycLDoFNCGN5qC\nu+7/lvhU6YQcwq8J3G80VPIRQr6QTd4SXjNveyCZIdSlrDiOJvypTz3+RIvuymNW\nDzvHlV2jr5gfFkSRK5mEoiKVb96BVbxXSS1Fsv8V4QKBgQD7XWNLmxeywhp+HhQu\nk2+00N1QfJWOd2mehKEdWyNRNloEb3510scPWYnYDp8NrPXlFLxWEg9nIstFPEF4\nfJlkoNy4jzYVowv4CEQ3NCr90HQe5cSpuG/oGX4uiFuC9pn23XwZd49a74Z2KNFB\n5bz/saE3HO+wdG/vmuBjSukuuQKBgQC9L37lczb5URUpaAu0RxkE0/4GHzoN0yHB\n+NlqX2i75DK40KTqpjN8MHKrqW4VwXJacrfpAoPnZBgi9DsHIvN1iVFMyhSzYkTD\nyrqFxTkJcAq9FOFF878dHCr5qvzoV+G7EwKdYUa0kOmJQZYPHy/uGPgZhD+y09op\nQW7puom3UQKBgCsrC511YimB6jjUg5TIHzwHTqq+6pRP76SYlG7NMxCEbAss9qPX\ncfYx41lmkWww0v3nhLynV1vX/t7CDWBazaEZey568cffe3O6P7TXUbbLMNYJka+w\nDA/pKOFm64hfP2vE98YL4WO1lPr/4YgWo1GqOMyVPJiqNnsItxZ2S/uJAoGAO2fF\nngEeuw0F6xmby0EkDwsOUhfOH/czO3iLtMY+2fkfID+L+Y60zgNcjqDGS5iR8urg\n6w76Ileg6KDuRCBqeHblC4rNE0MBOsXW6hhy/46qIJOE5XVThq2IpRtXDRJDdH3U\nrVyVWi/C1XG90APIBijbBxAq/FlfwOKmFEiZ4/ECgYAArmmklXcqPfYfwvlP2wgu\nTIw9nFIUWGP7UlVTsXdVGkehilWgG7UUFAx1mPT9hRcjY9dbsIl5yEMJG3KmTydG\nKymFDMPv0Wpo0LKgp+MH5Xeutbp6+HW2HaWeolIlDMsrKG6vPcmePtT6UeQc1TG5\n+OuRxXWVAxwxNsBaHYYWyA==\n-----END PRIVATE KEY-----"
    AIGW_AUTH__BYPASS_EXTERNAL_WITH_HEADER: true
    AIGW_MOCK_MODEL_RESPONSES: true
    AIGW_FASTAPI__API_PORT: 5052
    AI_GATEWAY_URL: "http://ai-gateway:5052"
    CI_DEBUG_SERVICES: true
  script:
    - make test-integration

tests:evaluation:
  extends: .poetry
  stage: test
  needs:
    - install
  script:
    - make eval
  when: manual

.test-base: &test-base
  stage: test
  trigger:
    project: gitlab-org/duo-workflow/testing/duo-workflow-tests

.test-variables: &test-variables
  LS_DATASET: "duo_workflow.swe-bench-verified-test.1"
  LANGCHAIN_PROJECT: "duo-workflow-ci-job"
  DW_SERVICE_REF: $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
  DW_CONCURRENCY: 3
  SWEBENCH_START: "true"

sanity-tests:
  # Runs SWE Bench tests on a small set of problems that are consistently resolved by Duo Workflow.
  <<: *test-base
  when: always
  allow_failure: true # TODO: to be removed once swe-bench pipelines are stable enough
  variables:
    <<: *test-variables
    LS_DATASET_SPLIT: "solved_consistently_sm"

regression-tests:
  <<: *test-base
  when: manual
  allow_failure: true
  variables:
    <<: *test-variables
    LS_DATASET_SPLIT: "validation_stratified_b06f4db4_p30"

.proto-variables:
  variables:
    DEBIAN_VERSION: "bookworm"
    RUBY_VERSION: "3.3"
    GO_VERSION: "1.22"
    PYTHON_VERSION: "3.12.10"
    POETRY_VERSION: "2.0.1"

check-proto-go:
  extends: [.proto-variables]
  image: golang:${GO_VERSION}-${DEBIAN_VERSION}
  stage: test
  script:
    - apt update
    - apt install unzip # Needed by Makefile to download and install protoc
    - make gen-proto-go
    - '(git diff --exit-code || (echo "ERROR: There are changes after running make gen-proto-go. Run it locally and commit the changes." && exit 1))'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - contract/**/*.proto
        - clients/gopb/**/*.go

check-proto-python:
  extends: [.proto-variables]
  image: python:${PYTHON_VERSION}-${DEBIAN_VERSION}
  stage: test
  script:
    - pip install poetry==${POETRY_VERSION}
    - make gen-proto-python
    - '(git diff --exit-code || (echo "ERROR: There are changes after running make gen-proto-python. Run it locally and commit the changes." && exit 1))'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - contract/**/*.proto
        - contract/**/*.py
        - contract/**/*.pyi

check-proto-ruby:
  extends: [.proto-variables]
  image: ruby:${RUBY_VERSION}-${DEBIAN_VERSION}
  stage: test
  script:
    - make gen-proto-ruby
    - '(git diff --exit-code || (echo "ERROR: There are changes after running make gen-proto-ruby. Run it locally and commit the changes." && exit 1))'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - contract/**/*.proto
        - clients/ruby/**/*.rb

check-proto-node:
  extends: [.proto-variables]
  image: node:18-${DEBIAN_VERSION}
  stage: test
  script:
    - make gen-proto-node
    - '(git diff --exit-code || (echo "ERROR: There are changes after running make gen-proto-node. Run it locally and commit the changes." && exit 1))'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - contract/**/*.proto
        - clients/node/src/**/*.ts
        - clients/node/package.json
        - clients/node/package-lock.json
