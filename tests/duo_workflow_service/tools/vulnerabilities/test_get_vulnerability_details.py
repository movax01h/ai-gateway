import json
from unittest.mock import AsyncMock, Mock

import pytest

from duo_workflow_service.tools.vulnerabilities.get_vulnerability_details import (
    GetVulnerabilityDetails,
    GetVulnerabilityDetailsInput,
)


@pytest.fixture
def vulnerability_details_data():
    """Fixture for detailed vulnerability data."""
    return {
        "id": "gid://gitlab/Vulnerability/567",
        "project": {
            "id": "gid://gitlab/Project/1",
            "fullPath": "toolbox/gitlab-smoke-tests",
        },
        "title": "SQL Injection in user authentication",
        "state": "DETECTED",
        "description": "A SQL injection vulnerability was found in the user authentication module.",
        "reportType": "SAST",
        "reachability": "CONFIRMED",
        "cveEnrichment": {
            "cve": "CVE-2023-12345",
            "epssScore": 0.85,
            "isKnownExploit": True,
        },
        "detectedAt": "2023-10-01T12:00:00Z",
        "dismissedAt": None,
        "initialDetectedPipeline": {
            "id": "gid://gitlab/Ci::Pipeline/123",
            "name": "security-scan",
            "createdAt": "2023-10-01T11:30:00Z",
        },
        "location": {
            "__typename": "VulnerabilityLocationSast",
            "blobPath": "app/models/user.rb",
            "file": "app/models/user.rb",
            "startLine": 42,
        },
        "details": [
            {
                "__typename": "VulnerabilityDetailText",
                "name": "Summary",
                "value": "SQL injection vulnerability detected",
            },
            {
                "__typename": "VulnerabilityDetailFileLocation",
                "name": "Location",
                "fileName": "app/models/user.rb",
                "lineStart": 42,
                "lineEnd": 45,
            },
        ],
    }


@pytest.fixture
def gitlab_client_mock():
    return Mock()


@pytest.fixture
def metadata(gitlab_client_mock):
    return {
        "gitlab_client": gitlab_client_mock,
        "gitlab_host": "gitlab.com",
    }


@pytest.mark.asyncio
async def test_get_vulnerability_details(
    gitlab_client_mock, metadata, vulnerability_details_data
):
    gitlab_client_mock.apost = AsyncMock(
        return_value={"data": {"vulnerability": vulnerability_details_data}}
    )

    tool = GetVulnerabilityDetails(metadata=metadata)

    input_data = {
        "vulnerability_id": "567",
    }

    response = await tool.arun(input_data)

    expected_response = json.dumps(
        {
            "vulnerability": vulnerability_details_data,
        }
    )
    assert response == expected_response

    gitlab_client_mock.apost.assert_called_once()
    call_args = gitlab_client_mock.apost.call_args
    assert call_args[1]["path"] == "/api/graphql"

    body = json.loads(call_args[1]["body"])
    assert body["variables"]["vulnerabilityId"] == "gid://gitlab/Vulnerability/567"
    assert "vulnerability(id: $vulnerabilityId)" in body["query"]


@pytest.mark.asyncio
async def test_get_vulnerability_details_not_found(gitlab_client_mock, metadata):
    gitlab_client_mock.apost = AsyncMock(return_value={"data": {"vulnerability": None}})

    tool = GetVulnerabilityDetails(metadata=metadata)

    input_data = {
        "vulnerability_id": "999",
    }

    response = await tool.arun(input_data)

    error_response = json.loads(response)
    assert "error" in error_response
    assert "Vulnerability with ID 999 not found" in error_response["error"]


@pytest.mark.asyncio
async def test_get_vulnerability_details_graphql_error(gitlab_client_mock, metadata):
    gitlab_client_mock.apost = AsyncMock(
        return_value={
            "errors": [
                {
                    "message": "Variable $vulnerabilityId of type ID! was provided invalid value",
                    "locations": [{"line": 1, "column": 1}],
                }
            ]
        }
    )

    tool = GetVulnerabilityDetails(metadata=metadata)

    input_data = {
        "vulnerability_id": "invalid-id",
    }

    response = await tool.arun(input_data)

    error_response = json.loads(response)
    assert "error" in error_response
    assert (
        "Invalid vulnerability ID: invalid-id. Must be numeric."
        in error_response["error"]
    )


@pytest.mark.asyncio
async def test_get_vulnerability_details_exception(gitlab_client_mock, metadata):
    gitlab_client_mock.apost = AsyncMock(side_effect=Exception("Network Error"))

    tool = GetVulnerabilityDetails(metadata=metadata)

    input_data = {
        "vulnerability_id": "567",
    }

    response = await tool.arun(input_data)

    error_response = json.loads(response)
    assert "error" in error_response
    assert "Network Error" in error_response["error"]


def test_get_vulnerability_details_format_display_message():
    tool = GetVulnerabilityDetails(metadata={})
    input_data = GetVulnerabilityDetailsInput(vulnerability_id="567")
    expected_message = "Get details for vulnerability 567"
    assert tool.format_display_message(input_data) == expected_message
