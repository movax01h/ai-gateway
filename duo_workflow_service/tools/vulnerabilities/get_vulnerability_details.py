import json
from typing import Any, Type

from pydantic import BaseModel, Field

from duo_workflow_service.tools.duo_base_tool import DuoBaseTool
from duo_workflow_service.tools.vulnerabilities.queries.vulnerabilities import (
    GET_VULNERABILITY_DETAILS_QUERY,
)


class GetVulnerabilityDetailsInput(BaseModel):
    vulnerability_id: str = Field(
        description="The numeric ID of the vulnerability (e.g., '567')",
    )


class GetVulnerabilityDetails(DuoBaseTool):
    name: str = "get_vulnerability_details"
    description: str = """Get detailed information about a specific vulnerability using its numeric ID.

    The vulnerability ID should be just the numeric identifier (e.g., '567').

    This tool provides comprehensive details including:
    - Basic vulnerability information (title, state, description, severity)
    - Location details (file paths, line numbers, etc.)
    - CVE enrichment data (EPSS scores, known exploits)
    - Detection pipeline information
    - Detailed vulnerability report data with nested structures

    For example:
        get_vulnerability_details(vulnerability_id="567")
    """
    args_schema: Type[BaseModel] = GetVulnerabilityDetailsInput  # type: ignore

    async def _arun(self, **kwargs: Any) -> str:
        vulnerability_id = kwargs.pop("vulnerability_id")

        try:
            # Convert numeric ID to full GraphQL ID format
            if not vulnerability_id.isdigit():
                return json.dumps(
                    {
                        "error": f"Invalid vulnerability ID: {vulnerability_id}. Must be numeric."
                    }
                )
            full_vulnerability_id = f"gid://gitlab/Vulnerability/{vulnerability_id}"
            variables = {
                "vulnerabilityId": full_vulnerability_id,
            }

            response = await self.gitlab_client.apost(
                path="/api/graphql",
                body=json.dumps(
                    {"query": GET_VULNERABILITY_DETAILS_QUERY, "variables": variables}
                ),
            )

            if "errors" in response:
                return json.dumps({"error": response["errors"]})

            vulnerability = response["data"]["vulnerability"]

            if not vulnerability:
                return json.dumps(
                    {"error": f"Vulnerability with ID {vulnerability_id} not found"}
                )

            return json.dumps({"vulnerability": vulnerability})
        except Exception as e:
            return json.dumps({"error": str(e)})

    def format_display_message(
        self, args: GetVulnerabilityDetailsInput, _tool_response: Any = None
    ) -> str:
        return f"Get details for vulnerability {args.vulnerability_id}"
