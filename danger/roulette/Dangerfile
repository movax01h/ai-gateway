# frozen_string_literal: true

PROJECT_NAME = helper.config.project_name

MESSAGE = <<~MARKDOWN
  ## Reviewer roulette
MARKDOWN

CATEGORY_TABLE = <<MARKDOWN

| Category | Reviewer | Maintainer |
| -------- | -------- | ---------- |
MARKDOWN

POST_TABLE_MESSAGE = <<MARKDOWN

Please refer to [documentation page](https://docs.gitlab.com/development/code_review/#reviewer-roulette)
for guidance on how you can benefit from the Reviewer Roulette, or use the
[GitLab Review Workload Dashboard](https://gitlab-org.gitlab.io/gitlab-roulette/)
to find other available reviewers.

MARKDOWN

NO_SUGGESTIONS = <<MARKDOWN

There are no reviewer and maintainer suggestions for the changes in this MR.
MARKDOWN

TABLE_HEADER = <<~MARKDOWN
  | Reviewer | Maintainer |
  | -------- | ---------- |
MARKDOWN

UNKNOWN_FILES_MESSAGE = <<MARKDOWN
### Uncategorized files

These files couldn't be categorized, so Danger was unable to suggest a reviewer.
Please consider creating a merge request to
[add support](https://gitlab.com/gitlab-org/gitlab/blob/master/tooling/danger/project_helper.rb)
for them.
MARKDOWN

OPTIONAL_REVIEW_TEMPLATE = '%{role} review is optional for %{category}'

def group_not_available_template(slack_channel, gitlab_group)
  <<~TEMPLATE.strip
    No engineer is available for automated assignment, please reach out to the `#{slack_channel}` Slack channel or mention `#{gitlab_group}` for assistance.
  TEMPLATE
end

NOT_AVAILABLE_TEMPLATES = {
  default: 'No %{role} available',
  analytics_instrumentation: group_not_available_template('#g_analyze_analytics_instrumentation', '@gitlab-org/analytics-section/analytics-instrumentation/engineers')
}.freeze

CATEGORY_LABELS = {
  ai_gateway: '~"devops::ai-powered"',
  duo_workflow_service: '~"group::agent foundations"',
  analytics_instrumentation: '~"group::analytics instrumentation"',
}.freeze

def note_for_spin_role(spin, role, category)
  template = NOT_AVAILABLE_TEMPLATES[category] || NOT_AVAILABLE_TEMPLATES[:default]

  note =
    if spin.optional_role == role
      OPTIONAL_REVIEW_TEMPLATE % { role: role.capitalize, category: CATEGORY_LABELS[spin.category] }
    else
      spin.public_send(role)&.markdown_name(author: roulette.team_mr_author) # rubocop:disable GitlabSecurity/PublicSend
    end

  note || (template % { role: role })
end

def markdown_row_for_spin(category, spin)
  maintainer_note = note_for_spin_role(spin, :maintainer, category)
  reviewer_note = note_for_spin_role(spin, :reviewer, category)

  "| #{CATEGORY_LABELS[category]} | #{reviewer_note} | #{maintainer_note} |"
end

changes = helper.changes_by_category
categories = roulette.prepare_categories(changes.keys - [:unknown])

if changes.any?
  random_roulette_spins = roulette.spin(nil, categories)
  rows = random_roulette_spins.map do |spin|
    markdown_row_for_spin(spin.category, spin)
  end

  markdown(MESSAGE)

  if rows.empty?
    markdown(NO_SUGGESTIONS)
  else
    markdown(CATEGORY_TABLE + rows.join("\n"))
    markdown(POST_TABLE_MESSAGE)
  end

  unknown = changes.fetch(:unknown, [])
  markdown(UNKNOWN_FILES_MESSAGE + helper.markdown_list(unknown)) unless unknown.empty?
end
