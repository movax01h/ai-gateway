// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.3
// source: contract/contract.proto

package gopb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ClientEvent_StartRequest
	//	*ClientEvent_ActionResponse
	//	*ClientEvent_Heartbeat
	Response isClientEvent_Response `protobuf_oneof:"response"`
}

func (x *ClientEvent) Reset() {
	*x = ClientEvent{}
	mi := &file_contract_contract_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEvent) ProtoMessage() {}

func (x *ClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEvent.ProtoReflect.Descriptor instead.
func (*ClientEvent) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{0}
}

func (m *ClientEvent) GetResponse() isClientEvent_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ClientEvent) GetStartRequest() *StartWorkflowRequest {
	if x, ok := x.GetResponse().(*ClientEvent_StartRequest); ok {
		return x.StartRequest
	}
	return nil
}

func (x *ClientEvent) GetActionResponse() *ActionResponse {
	if x, ok := x.GetResponse().(*ClientEvent_ActionResponse); ok {
		return x.ActionResponse
	}
	return nil
}

func (x *ClientEvent) GetHeartbeat() *HeartbeatRequest {
	if x, ok := x.GetResponse().(*ClientEvent_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isClientEvent_Response interface {
	isClientEvent_Response()
}

type ClientEvent_StartRequest struct {
	StartRequest *StartWorkflowRequest `protobuf:"bytes,1,opt,name=startRequest,proto3,oneof"`
}

type ClientEvent_ActionResponse struct {
	ActionResponse *ActionResponse `protobuf:"bytes,2,opt,name=actionResponse,proto3,oneof"`
}

type ClientEvent_Heartbeat struct {
	Heartbeat *HeartbeatRequest `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"`
}

func (*ClientEvent_StartRequest) isClientEvent_Response() {}

func (*ClientEvent_ActionResponse) isClientEvent_Response() {}

func (*ClientEvent_Heartbeat) isClientEvent_Response() {}

type StartWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVersion           string               `protobuf:"bytes,1,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	WorkflowID              string               `protobuf:"bytes,2,opt,name=workflowID,proto3" json:"workflowID,omitempty"`
	WorkflowDefinition      string               `protobuf:"bytes,3,opt,name=workflowDefinition,proto3" json:"workflowDefinition,omitempty"`
	Goal                    string               `protobuf:"bytes,4,opt,name=goal,proto3" json:"goal,omitempty"`
	WorkflowMetadata        string               `protobuf:"bytes,5,opt,name=workflowMetadata,proto3" json:"workflowMetadata,omitempty"`
	ClientCapabilities      []string             `protobuf:"bytes,6,rep,name=clientCapabilities,proto3" json:"clientCapabilities,omitempty"`
	McpTools                []*McpTool           `protobuf:"bytes,8,rep,name=mcpTools,proto3" json:"mcpTools,omitempty"`
	AdditionalContext       []*AdditionalContext `protobuf:"bytes,9,rep,name=additional_context,json=additionalContext,proto3" json:"additional_context,omitempty"`
	Approval                *Approval            `protobuf:"bytes,10,opt,name=approval,proto3,oneof" json:"approval,omitempty"`
	FlowConfig              *structpb.Struct     `protobuf:"bytes,11,opt,name=flowConfig,proto3,oneof" json:"flowConfig,omitempty"`
	FlowConfigSchemaVersion *string              `protobuf:"bytes,12,opt,name=flowConfigSchemaVersion,proto3,oneof" json:"flowConfigSchemaVersion,omitempty"`
	PreapprovedTools        []string             `protobuf:"bytes,13,rep,name=preapproved_tools,json=preapprovedTools,proto3" json:"preapproved_tools,omitempty"`
}

func (x *StartWorkflowRequest) Reset() {
	*x = StartWorkflowRequest{}
	mi := &file_contract_contract_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowRequest) ProtoMessage() {}

func (x *StartWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowRequest.ProtoReflect.Descriptor instead.
func (*StartWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{1}
}

func (x *StartWorkflowRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflowID() string {
	if x != nil {
		return x.WorkflowID
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflowDefinition() string {
	if x != nil {
		return x.WorkflowDefinition
	}
	return ""
}

func (x *StartWorkflowRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflowMetadata() string {
	if x != nil {
		return x.WorkflowMetadata
	}
	return ""
}

func (x *StartWorkflowRequest) GetClientCapabilities() []string {
	if x != nil {
		return x.ClientCapabilities
	}
	return nil
}

func (x *StartWorkflowRequest) GetMcpTools() []*McpTool {
	if x != nil {
		return x.McpTools
	}
	return nil
}

func (x *StartWorkflowRequest) GetAdditionalContext() []*AdditionalContext {
	if x != nil {
		return x.AdditionalContext
	}
	return nil
}

func (x *StartWorkflowRequest) GetApproval() *Approval {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *StartWorkflowRequest) GetFlowConfig() *structpb.Struct {
	if x != nil {
		return x.FlowConfig
	}
	return nil
}

func (x *StartWorkflowRequest) GetFlowConfigSchemaVersion() string {
	if x != nil && x.FlowConfigSchemaVersion != nil {
		return *x.FlowConfigSchemaVersion
	}
	return ""
}

func (x *StartWorkflowRequest) GetPreapprovedTools() []string {
	if x != nil {
		return x.PreapprovedTools
	}
	return nil
}

type ActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Response  string `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	// Types that are assignable to ResponseType:
	//
	//	*ActionResponse_PlainTextResponse
	//	*ActionResponse_HttpResponse
	ResponseType isActionResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *ActionResponse) Reset() {
	*x = ActionResponse{}
	mi := &file_contract_contract_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResponse) ProtoMessage() {}

func (x *ActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResponse.ProtoReflect.Descriptor instead.
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{2}
}

func (x *ActionResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ActionResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (m *ActionResponse) GetResponseType() isActionResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *ActionResponse) GetPlainTextResponse() *PlainTextResponse {
	if x, ok := x.GetResponseType().(*ActionResponse_PlainTextResponse); ok {
		return x.PlainTextResponse
	}
	return nil
}

func (x *ActionResponse) GetHttpResponse() *HttpResponse {
	if x, ok := x.GetResponseType().(*ActionResponse_HttpResponse); ok {
		return x.HttpResponse
	}
	return nil
}

type isActionResponse_ResponseType interface {
	isActionResponse_ResponseType()
}

type ActionResponse_PlainTextResponse struct {
	PlainTextResponse *PlainTextResponse `protobuf:"bytes,3,opt,name=plainTextResponse,proto3,oneof"`
}

type ActionResponse_HttpResponse struct {
	HttpResponse *HttpResponse `protobuf:"bytes,4,opt,name=httpResponse,proto3,oneof"`
}

func (*ActionResponse_PlainTextResponse) isActionResponse_ResponseType() {}

func (*ActionResponse_HttpResponse) isActionResponse_ResponseType() {}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_contract_contract_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{3}
}

func (x *HeartbeatRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PlainTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PlainTextResponse) Reset() {
	*x = PlainTextResponse{}
	mi := &file_contract_contract_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlainTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainTextResponse) ProtoMessage() {}

func (x *PlainTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainTextResponse.ProtoReflect.Descriptor instead.
func (*PlainTextResponse) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{4}
}

func (x *PlainTextResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *PlainTextResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type HttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers    map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusCode int32             `protobuf:"varint,2,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Body       string            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Error      string            `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *HttpResponse) Reset() {
	*x = HttpResponse{}
	mi := &file_contract_contract_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponse) ProtoMessage() {}

func (x *HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponse.ProtoReflect.Descriptor instead.
func (*HttpResponse) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{5}
}

func (x *HttpResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HttpResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HttpResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	// Types that are assignable to Action:
	//
	//	*Action_RunCommand
	//	*Action_RunHTTPRequest
	//	*Action_RunReadFile
	//	*Action_RunWriteFile
	//	*Action_RunGitCommand
	//	*Action_RunEditFile
	//	*Action_NewCheckpoint
	//	*Action_ListDirectory
	//	*Action_Grep
	//	*Action_FindFiles
	//	*Action_RunMCPTool
	//	*Action_Mkdir
	//	*Action_RunReadFiles
	Action isAction_Action `protobuf_oneof:"action"`
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_contract_contract_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{6}
}

func (x *Action) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Action) GetRunCommand() *RunCommandAction {
	if x, ok := x.GetAction().(*Action_RunCommand); ok {
		return x.RunCommand
	}
	return nil
}

func (x *Action) GetRunHTTPRequest() *RunHTTPRequest {
	if x, ok := x.GetAction().(*Action_RunHTTPRequest); ok {
		return x.RunHTTPRequest
	}
	return nil
}

func (x *Action) GetRunReadFile() *ReadFile {
	if x, ok := x.GetAction().(*Action_RunReadFile); ok {
		return x.RunReadFile
	}
	return nil
}

func (x *Action) GetRunWriteFile() *WriteFile {
	if x, ok := x.GetAction().(*Action_RunWriteFile); ok {
		return x.RunWriteFile
	}
	return nil
}

func (x *Action) GetRunGitCommand() *RunGitCommand {
	if x, ok := x.GetAction().(*Action_RunGitCommand); ok {
		return x.RunGitCommand
	}
	return nil
}

func (x *Action) GetRunEditFile() *EditFile {
	if x, ok := x.GetAction().(*Action_RunEditFile); ok {
		return x.RunEditFile
	}
	return nil
}

func (x *Action) GetNewCheckpoint() *NewCheckpoint {
	if x, ok := x.GetAction().(*Action_NewCheckpoint); ok {
		return x.NewCheckpoint
	}
	return nil
}

func (x *Action) GetListDirectory() *ListDirectory {
	if x, ok := x.GetAction().(*Action_ListDirectory); ok {
		return x.ListDirectory
	}
	return nil
}

func (x *Action) GetGrep() *Grep {
	if x, ok := x.GetAction().(*Action_Grep); ok {
		return x.Grep
	}
	return nil
}

func (x *Action) GetFindFiles() *FindFiles {
	if x, ok := x.GetAction().(*Action_FindFiles); ok {
		return x.FindFiles
	}
	return nil
}

func (x *Action) GetRunMCPTool() *RunMCPTool {
	if x, ok := x.GetAction().(*Action_RunMCPTool); ok {
		return x.RunMCPTool
	}
	return nil
}

func (x *Action) GetMkdir() *Mkdir {
	if x, ok := x.GetAction().(*Action_Mkdir); ok {
		return x.Mkdir
	}
	return nil
}

func (x *Action) GetRunReadFiles() *ReadFiles {
	if x, ok := x.GetAction().(*Action_RunReadFiles); ok {
		return x.RunReadFiles
	}
	return nil
}

type isAction_Action interface {
	isAction_Action()
}

type Action_RunCommand struct {
	RunCommand *RunCommandAction `protobuf:"bytes,2,opt,name=runCommand,proto3,oneof"`
}

type Action_RunHTTPRequest struct {
	RunHTTPRequest *RunHTTPRequest `protobuf:"bytes,3,opt,name=runHTTPRequest,proto3,oneof"`
}

type Action_RunReadFile struct {
	RunReadFile *ReadFile `protobuf:"bytes,4,opt,name=runReadFile,proto3,oneof"`
}

type Action_RunWriteFile struct {
	RunWriteFile *WriteFile `protobuf:"bytes,5,opt,name=runWriteFile,proto3,oneof"`
}

type Action_RunGitCommand struct {
	RunGitCommand *RunGitCommand `protobuf:"bytes,6,opt,name=runGitCommand,proto3,oneof"`
}

type Action_RunEditFile struct {
	RunEditFile *EditFile `protobuf:"bytes,7,opt,name=runEditFile,proto3,oneof"`
}

type Action_NewCheckpoint struct {
	NewCheckpoint *NewCheckpoint `protobuf:"bytes,8,opt,name=newCheckpoint,proto3,oneof"`
}

type Action_ListDirectory struct {
	ListDirectory *ListDirectory `protobuf:"bytes,9,opt,name=listDirectory,proto3,oneof"`
}

type Action_Grep struct {
	Grep *Grep `protobuf:"bytes,10,opt,name=grep,proto3,oneof"`
}

type Action_FindFiles struct {
	FindFiles *FindFiles `protobuf:"bytes,11,opt,name=findFiles,proto3,oneof"`
}

type Action_RunMCPTool struct {
	RunMCPTool *RunMCPTool `protobuf:"bytes,12,opt,name=runMCPTool,proto3,oneof"`
}

type Action_Mkdir struct {
	Mkdir *Mkdir `protobuf:"bytes,13,opt,name=mkdir,proto3,oneof"`
}

type Action_RunReadFiles struct {
	RunReadFiles *ReadFiles `protobuf:"bytes,14,opt,name=runReadFiles,proto3,oneof"`
}

func (*Action_RunCommand) isAction_Action() {}

func (*Action_RunHTTPRequest) isAction_Action() {}

func (*Action_RunReadFile) isAction_Action() {}

func (*Action_RunWriteFile) isAction_Action() {}

func (*Action_RunGitCommand) isAction_Action() {}

func (*Action_RunEditFile) isAction_Action() {}

func (*Action_NewCheckpoint) isAction_Action() {}

func (*Action_ListDirectory) isAction_Action() {}

func (*Action_Grep) isAction_Action() {}

func (*Action_FindFiles) isAction_Action() {}

func (*Action_RunMCPTool) isAction_Action() {}

func (*Action_Mkdir) isAction_Action() {}

func (*Action_RunReadFiles) isAction_Action() {}

type RunCommandAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program   string   `protobuf:"bytes,3,opt,name=program,proto3" json:"program,omitempty"`
	Arguments []string `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Flags     []string `protobuf:"bytes,5,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *RunCommandAction) Reset() {
	*x = RunCommandAction{}
	mi := &file_contract_contract_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunCommandAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandAction) ProtoMessage() {}

func (x *RunCommandAction) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandAction.ProtoReflect.Descriptor instead.
func (*RunCommandAction) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{7}
}

func (x *RunCommandAction) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *RunCommandAction) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *RunCommandAction) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

type ReadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepath string `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
}

func (x *ReadFile) Reset() {
	*x = ReadFile{}
	mi := &file_contract_contract_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFile) ProtoMessage() {}

func (x *ReadFile) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFile.ProtoReflect.Descriptor instead.
func (*ReadFile) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{8}
}

func (x *ReadFile) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

type ReadFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepaths []string `protobuf:"bytes,1,rep,name=filepaths,proto3" json:"filepaths,omitempty"`
}

func (x *ReadFiles) Reset() {
	*x = ReadFiles{}
	mi := &file_contract_contract_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFiles) ProtoMessage() {}

func (x *ReadFiles) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFiles.ProtoReflect.Descriptor instead.
func (*ReadFiles) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{9}
}

func (x *ReadFiles) GetFilepaths() []string {
	if x != nil {
		return x.Filepaths
	}
	return nil
}

type WriteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepath string `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	Contents string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *WriteFile) Reset() {
	*x = WriteFile{}
	mi := &file_contract_contract_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFile) ProtoMessage() {}

func (x *WriteFile) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFile.ProtoReflect.Descriptor instead.
func (*WriteFile) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{10}
}

func (x *WriteFile) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *WriteFile) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type EditFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepath  string `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	OldString string `protobuf:"bytes,2,opt,name=oldString,proto3" json:"oldString,omitempty"`
	NewString string `protobuf:"bytes,3,opt,name=newString,proto3" json:"newString,omitempty"`
}

func (x *EditFile) Reset() {
	*x = EditFile{}
	mi := &file_contract_contract_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFile) ProtoMessage() {}

func (x *EditFile) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFile.ProtoReflect.Descriptor instead.
func (*EditFile) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{11}
}

func (x *EditFile) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *EditFile) GetOldString() string {
	if x != nil {
		return x.OldString
	}
	return ""
}

func (x *EditFile) GetNewString() string {
	if x != nil {
		return x.NewString
	}
	return ""
}

type RunHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string  `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Path   string  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Body   *string `protobuf:"bytes,3,opt,name=body,proto3,oneof" json:"body,omitempty"`
}

func (x *RunHTTPRequest) Reset() {
	*x = RunHTTPRequest{}
	mi := &file_contract_contract_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunHTTPRequest) ProtoMessage() {}

func (x *RunHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunHTTPRequest.ProtoReflect.Descriptor instead.
func (*RunHTTPRequest) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{12}
}

func (x *RunHTTPRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RunHTTPRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RunHTTPRequest) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

type RunGitCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command       string  `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Arguments     *string `protobuf:"bytes,2,opt,name=arguments,proto3,oneof" json:"arguments,omitempty"`
	RepositoryUrl string  `protobuf:"bytes,3,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
}

func (x *RunGitCommand) Reset() {
	*x = RunGitCommand{}
	mi := &file_contract_contract_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunGitCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunGitCommand) ProtoMessage() {}

func (x *RunGitCommand) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunGitCommand.ProtoReflect.Descriptor instead.
func (*RunGitCommand) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{13}
}

func (x *RunGitCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunGitCommand) GetArguments() string {
	if x != nil && x.Arguments != nil {
		return *x.Arguments
	}
	return ""
}

func (x *RunGitCommand) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

type GenerateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowDefinition *string `protobuf:"bytes,1,opt,name=workflowDefinition,proto3,oneof" json:"workflowDefinition,omitempty"`
}

func (x *GenerateTokenRequest) Reset() {
	*x = GenerateTokenRequest{}
	mi := &file_contract_contract_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTokenRequest) ProtoMessage() {}

func (x *GenerateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTokenRequest.ProtoReflect.Descriptor instead.
func (*GenerateTokenRequest) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateTokenRequest) GetWorkflowDefinition() string {
	if x != nil && x.WorkflowDefinition != nil {
		return *x.WorkflowDefinition
	}
	return ""
}

type GenerateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpiresAt int64  `protobuf:"varint,2,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
}

func (x *GenerateTokenResponse) Reset() {
	*x = GenerateTokenResponse{}
	mi := &file_contract_contract_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTokenResponse) ProtoMessage() {}

func (x *GenerateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTokenResponse.ProtoReflect.Descriptor instead.
func (*GenerateTokenResponse) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GenerateTokenResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type ListToolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListToolsRequest) Reset() {
	*x = ListToolsRequest{}
	mi := &file_contract_contract_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListToolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsRequest) ProtoMessage() {}

func (x *ListToolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsRequest.ProtoReflect.Descriptor instead.
func (*ListToolsRequest) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{16}
}

type ListToolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tools []*structpb.Struct `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`
}

func (x *ListToolsResponse) Reset() {
	*x = ListToolsResponse{}
	mi := &file_contract_contract_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListToolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsResponse) ProtoMessage() {}

func (x *ListToolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsResponse.ProtoReflect.Descriptor instead.
func (*ListToolsResponse) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{17}
}

func (x *ListToolsResponse) GetTools() []*structpb.Struct {
	if x != nil {
		return x.Tools
	}
	return nil
}

type NewCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Checkpoint string   `protobuf:"bytes,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Goal       string   `protobuf:"bytes,3,opt,name=goal,proto3" json:"goal,omitempty"`
	Errors     []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *NewCheckpoint) Reset() {
	*x = NewCheckpoint{}
	mi := &file_contract_contract_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCheckpoint) ProtoMessage() {}

func (x *NewCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCheckpoint.ProtoReflect.Descriptor instead.
func (*NewCheckpoint) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{18}
}

func (x *NewCheckpoint) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NewCheckpoint) GetCheckpoint() string {
	if x != nil {
		return x.Checkpoint
	}
	return ""
}

func (x *NewCheckpoint) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *NewCheckpoint) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory string `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *ListDirectory) Reset() {
	*x = ListDirectory{}
	mi := &file_contract_contract_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectory) ProtoMessage() {}

func (x *ListDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectory.ProtoReflect.Descriptor instead.
func (*ListDirectory) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{19}
}

func (x *ListDirectory) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type Grep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchDirectory string `protobuf:"bytes,1,opt,name=search_directory,json=searchDirectory,proto3" json:"search_directory,omitempty"`
	Pattern         string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	CaseInsensitive bool   `protobuf:"varint,3,opt,name=case_insensitive,json=caseInsensitive,proto3" json:"case_insensitive,omitempty"`
}

func (x *Grep) Reset() {
	*x = Grep{}
	mi := &file_contract_contract_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Grep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grep) ProtoMessage() {}

func (x *Grep) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grep.ProtoReflect.Descriptor instead.
func (*Grep) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{20}
}

func (x *Grep) GetSearchDirectory() string {
	if x != nil {
		return x.SearchDirectory
	}
	return ""
}

func (x *Grep) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Grep) GetCaseInsensitive() bool {
	if x != nil {
		return x.CaseInsensitive
	}
	return false
}

type FindFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamePattern string `protobuf:"bytes,1,opt,name=name_pattern,json=namePattern,proto3" json:"name_pattern,omitempty"`
}

func (x *FindFiles) Reset() {
	*x = FindFiles{}
	mi := &file_contract_contract_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFiles) ProtoMessage() {}

func (x *FindFiles) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFiles.ProtoReflect.Descriptor instead.
func (*FindFiles) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{21}
}

func (x *FindFiles) GetNamePattern() string {
	if x != nil {
		return x.NamePattern
	}
	return ""
}

type McpTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	InputSchema string `protobuf:"bytes,3,opt,name=inputSchema,proto3" json:"inputSchema,omitempty"`
}

func (x *McpTool) Reset() {
	*x = McpTool{}
	mi := &file_contract_contract_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpTool) ProtoMessage() {}

func (x *McpTool) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpTool.ProtoReflect.Descriptor instead.
func (*McpTool) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{22}
}

func (x *McpTool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *McpTool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *McpTool) GetInputSchema() string {
	if x != nil {
		return x.InputSchema
	}
	return ""
}

type RunMCPTool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args string `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *RunMCPTool) Reset() {
	*x = RunMCPTool{}
	mi := &file_contract_contract_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMCPTool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMCPTool) ProtoMessage() {}

func (x *RunMCPTool) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMCPTool.ProtoReflect.Descriptor instead.
func (*RunMCPTool) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{23}
}

func (x *RunMCPTool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunMCPTool) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type AdditionalContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string  `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Id       *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Content  *string `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Metadata *string `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *AdditionalContext) Reset() {
	*x = AdditionalContext{}
	mi := &file_contract_contract_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalContext) ProtoMessage() {}

func (x *AdditionalContext) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalContext.ProtoReflect.Descriptor instead.
func (*AdditionalContext) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{24}
}

func (x *AdditionalContext) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *AdditionalContext) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AdditionalContext) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *AdditionalContext) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

type Approval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserDecision:
	//
	//	*Approval_Approval
	//	*Approval_Rejection
	UserDecision isApproval_UserDecision `protobuf_oneof:"user_decision"`
}

func (x *Approval) Reset() {
	*x = Approval{}
	mi := &file_contract_contract_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Approval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approval) ProtoMessage() {}

func (x *Approval) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approval.ProtoReflect.Descriptor instead.
func (*Approval) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{25}
}

func (m *Approval) GetUserDecision() isApproval_UserDecision {
	if m != nil {
		return m.UserDecision
	}
	return nil
}

func (x *Approval) GetApproval() *Approval_Approved {
	if x, ok := x.GetUserDecision().(*Approval_Approval); ok {
		return x.Approval
	}
	return nil
}

func (x *Approval) GetRejection() *Approval_Rejected {
	if x, ok := x.GetUserDecision().(*Approval_Rejection); ok {
		return x.Rejection
	}
	return nil
}

type isApproval_UserDecision interface {
	isApproval_UserDecision()
}

type Approval_Approval struct {
	Approval *Approval_Approved `protobuf:"bytes,1,opt,name=approval,proto3,oneof"`
}

type Approval_Rejection struct {
	Rejection *Approval_Rejected `protobuf:"bytes,2,opt,name=rejection,proto3,oneof"`
}

func (*Approval_Approval) isApproval_UserDecision() {}

func (*Approval_Rejection) isApproval_UserDecision() {}

type Mkdir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectoryPath string `protobuf:"bytes,1,opt,name=directory_path,json=directoryPath,proto3" json:"directory_path,omitempty"`
}

func (x *Mkdir) Reset() {
	*x = Mkdir{}
	mi := &file_contract_contract_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mkdir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mkdir) ProtoMessage() {}

func (x *Mkdir) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mkdir.ProtoReflect.Descriptor instead.
func (*Mkdir) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{26}
}

func (x *Mkdir) GetDirectoryPath() string {
	if x != nil {
		return x.DirectoryPath
	}
	return ""
}

type OsInformationContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform     string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Architecture string `protobuf:"bytes,2,opt,name=architecture,proto3" json:"architecture,omitempty"`
}

func (x *OsInformationContext) Reset() {
	*x = OsInformationContext{}
	mi := &file_contract_contract_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OsInformationContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsInformationContext) ProtoMessage() {}

func (x *OsInformationContext) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsInformationContext.ProtoReflect.Descriptor instead.
func (*OsInformationContext) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{27}
}

func (x *OsInformationContext) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *OsInformationContext) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

type Approval_Approved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Approval_Approved) Reset() {
	*x = Approval_Approved{}
	mi := &file_contract_contract_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Approval_Approved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approval_Approved) ProtoMessage() {}

func (x *Approval_Approved) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approval_Approved.ProtoReflect.Descriptor instead.
func (*Approval_Approved) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{25, 0}
}

type Approval_Rejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Approval_Rejected) Reset() {
	*x = Approval_Rejected{}
	mi := &file_contract_contract_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Approval_Rejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approval_Rejected) ProtoMessage() {}

func (x *Approval_Rejected) ProtoReflect() protoreflect.Message {
	mi := &file_contract_contract_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approval_Rejected.ProtoReflect.Descriptor instead.
func (*Approval_Rejected) Descriptor() ([]byte, []int) {
	return file_contract_contract_proto_rawDescGZIP(), []int{25, 1}
}

func (x *Approval_Rejected) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

var File_contract_contract_proto protoreflect.FileDescriptor

var file_contract_contract_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf9,
	0x04, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61,
	0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x08, 0x6d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x6d, 0x63, 0x70, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x30, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x45, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x3a, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x05, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x33, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x52, 0x75, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x72, 0x75, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x75, 0x6e, 0x47, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x47,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x75, 0x6e,
	0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x75, 0x6e,
	0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x04, 0x67, 0x72, 0x65, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x47, 0x72, 0x65, 0x70, 0x48, 0x00, 0x52,
	0x04, 0x67, 0x72, 0x65, 0x70, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x43, 0x50, 0x54, 0x6f,
	0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c,
	0x12, 0x1e, 0x0a, 0x05, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6b, 0x64, 0x69, 0x72,
	0x12, 0x30, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a,
	0x10, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x47, 0x69, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x26, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x29, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x62, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6c, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x5e, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x47, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x21, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x15,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x22, 0x73, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x76, 0x0a, 0x04, 0x47, 0x72, 0x65, 0x70, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0x2e, 0x0a,
	0x09, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x61, 0x0a,
	0x07, 0x4d, 0x63, 0x70, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0x34, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x4d, 0x43, 0x50, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01,
	0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x09,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0a, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x1a, 0x35, 0x0a, 0x08,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x05, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x14, 0x4f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x32, 0xaf, 0x01, 0x0a,
	0x0b, 0x44, 0x75, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x0f,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x0c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x07, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x11, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x68,
	0x5a, 0x51, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6f, 0x70, 0x73,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2d, 0x6d, 0x6c, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x2d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x69, 0x2d,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x67,
	0x6f, 0x70, 0x62, 0xea, 0x02, 0x12, 0x44, 0x75, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contract_contract_proto_rawDescOnce sync.Once
	file_contract_contract_proto_rawDescData = file_contract_contract_proto_rawDesc
)

func file_contract_contract_proto_rawDescGZIP() []byte {
	file_contract_contract_proto_rawDescOnce.Do(func() {
		file_contract_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_contract_contract_proto_rawDescData)
	})
	return file_contract_contract_proto_rawDescData
}

var file_contract_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_contract_contract_proto_goTypes = []any{
	(*ClientEvent)(nil),           // 0: ClientEvent
	(*StartWorkflowRequest)(nil),  // 1: StartWorkflowRequest
	(*ActionResponse)(nil),        // 2: ActionResponse
	(*HeartbeatRequest)(nil),      // 3: HeartbeatRequest
	(*PlainTextResponse)(nil),     // 4: PlainTextResponse
	(*HttpResponse)(nil),          // 5: HttpResponse
	(*Action)(nil),                // 6: Action
	(*RunCommandAction)(nil),      // 7: RunCommandAction
	(*ReadFile)(nil),              // 8: ReadFile
	(*ReadFiles)(nil),             // 9: ReadFiles
	(*WriteFile)(nil),             // 10: WriteFile
	(*EditFile)(nil),              // 11: EditFile
	(*RunHTTPRequest)(nil),        // 12: RunHTTPRequest
	(*RunGitCommand)(nil),         // 13: RunGitCommand
	(*GenerateTokenRequest)(nil),  // 14: GenerateTokenRequest
	(*GenerateTokenResponse)(nil), // 15: GenerateTokenResponse
	(*ListToolsRequest)(nil),      // 16: ListToolsRequest
	(*ListToolsResponse)(nil),     // 17: ListToolsResponse
	(*NewCheckpoint)(nil),         // 18: NewCheckpoint
	(*ListDirectory)(nil),         // 19: ListDirectory
	(*Grep)(nil),                  // 20: Grep
	(*FindFiles)(nil),             // 21: FindFiles
	(*McpTool)(nil),               // 22: McpTool
	(*RunMCPTool)(nil),            // 23: RunMCPTool
	(*AdditionalContext)(nil),     // 24: AdditionalContext
	(*Approval)(nil),              // 25: Approval
	(*Mkdir)(nil),                 // 26: Mkdir
	(*OsInformationContext)(nil),  // 27: OsInformationContext
	nil,                           // 28: HttpResponse.HeadersEntry
	(*Approval_Approved)(nil),     // 29: Approval.Approved
	(*Approval_Rejected)(nil),     // 30: Approval.Rejected
	(*structpb.Struct)(nil),       // 31: google.protobuf.Struct
}
var file_contract_contract_proto_depIdxs = []int32{
	1,  // 0: ClientEvent.startRequest:type_name -> StartWorkflowRequest
	2,  // 1: ClientEvent.actionResponse:type_name -> ActionResponse
	3,  // 2: ClientEvent.heartbeat:type_name -> HeartbeatRequest
	22, // 3: StartWorkflowRequest.mcpTools:type_name -> McpTool
	24, // 4: StartWorkflowRequest.additional_context:type_name -> AdditionalContext
	25, // 5: StartWorkflowRequest.approval:type_name -> Approval
	31, // 6: StartWorkflowRequest.flowConfig:type_name -> google.protobuf.Struct
	4,  // 7: ActionResponse.plainTextResponse:type_name -> PlainTextResponse
	5,  // 8: ActionResponse.httpResponse:type_name -> HttpResponse
	28, // 9: HttpResponse.headers:type_name -> HttpResponse.HeadersEntry
	7,  // 10: Action.runCommand:type_name -> RunCommandAction
	12, // 11: Action.runHTTPRequest:type_name -> RunHTTPRequest
	8,  // 12: Action.runReadFile:type_name -> ReadFile
	10, // 13: Action.runWriteFile:type_name -> WriteFile
	13, // 14: Action.runGitCommand:type_name -> RunGitCommand
	11, // 15: Action.runEditFile:type_name -> EditFile
	18, // 16: Action.newCheckpoint:type_name -> NewCheckpoint
	19, // 17: Action.listDirectory:type_name -> ListDirectory
	20, // 18: Action.grep:type_name -> Grep
	21, // 19: Action.findFiles:type_name -> FindFiles
	23, // 20: Action.runMCPTool:type_name -> RunMCPTool
	26, // 21: Action.mkdir:type_name -> Mkdir
	9,  // 22: Action.runReadFiles:type_name -> ReadFiles
	31, // 23: ListToolsResponse.tools:type_name -> google.protobuf.Struct
	29, // 24: Approval.approval:type_name -> Approval.Approved
	30, // 25: Approval.rejection:type_name -> Approval.Rejected
	0,  // 26: DuoWorkflow.ExecuteWorkflow:input_type -> ClientEvent
	14, // 27: DuoWorkflow.GenerateToken:input_type -> GenerateTokenRequest
	16, // 28: DuoWorkflow.ListTools:input_type -> ListToolsRequest
	6,  // 29: DuoWorkflow.ExecuteWorkflow:output_type -> Action
	15, // 30: DuoWorkflow.GenerateToken:output_type -> GenerateTokenResponse
	17, // 31: DuoWorkflow.ListTools:output_type -> ListToolsResponse
	29, // [29:32] is the sub-list for method output_type
	26, // [26:29] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_contract_contract_proto_init() }
func file_contract_contract_proto_init() {
	if File_contract_contract_proto != nil {
		return
	}
	file_contract_contract_proto_msgTypes[0].OneofWrappers = []any{
		(*ClientEvent_StartRequest)(nil),
		(*ClientEvent_ActionResponse)(nil),
		(*ClientEvent_Heartbeat)(nil),
	}
	file_contract_contract_proto_msgTypes[1].OneofWrappers = []any{}
	file_contract_contract_proto_msgTypes[2].OneofWrappers = []any{
		(*ActionResponse_PlainTextResponse)(nil),
		(*ActionResponse_HttpResponse)(nil),
	}
	file_contract_contract_proto_msgTypes[6].OneofWrappers = []any{
		(*Action_RunCommand)(nil),
		(*Action_RunHTTPRequest)(nil),
		(*Action_RunReadFile)(nil),
		(*Action_RunWriteFile)(nil),
		(*Action_RunGitCommand)(nil),
		(*Action_RunEditFile)(nil),
		(*Action_NewCheckpoint)(nil),
		(*Action_ListDirectory)(nil),
		(*Action_Grep)(nil),
		(*Action_FindFiles)(nil),
		(*Action_RunMCPTool)(nil),
		(*Action_Mkdir)(nil),
		(*Action_RunReadFiles)(nil),
	}
	file_contract_contract_proto_msgTypes[12].OneofWrappers = []any{}
	file_contract_contract_proto_msgTypes[13].OneofWrappers = []any{}
	file_contract_contract_proto_msgTypes[14].OneofWrappers = []any{}
	file_contract_contract_proto_msgTypes[24].OneofWrappers = []any{}
	file_contract_contract_proto_msgTypes[25].OneofWrappers = []any{
		(*Approval_Approval)(nil),
		(*Approval_Rejection)(nil),
	}
	file_contract_contract_proto_msgTypes[30].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contract_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contract_contract_proto_goTypes,
		DependencyIndexes: file_contract_contract_proto_depIdxs,
		MessageInfos:      file_contract_contract_proto_msgTypes,
	}.Build()
	File_contract_contract_proto = out.File
	file_contract_contract_proto_rawDesc = nil
	file_contract_contract_proto_goTypes = nil
	file_contract_contract_proto_depIdxs = nil
}
