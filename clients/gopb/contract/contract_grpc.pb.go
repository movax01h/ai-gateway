// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: contract/contract.proto

package gopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DuoWorkflow_ExecuteWorkflow_FullMethodName = "/DuoWorkflow/ExecuteWorkflow"
	DuoWorkflow_GenerateToken_FullMethodName   = "/DuoWorkflow/GenerateToken"
	DuoWorkflow_ListTools_FullMethodName       = "/DuoWorkflow/ListTools"
	DuoWorkflow_ListFlows_FullMethodName       = "/DuoWorkflow/ListFlows"
)

// DuoWorkflowClient is the client API for DuoWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DuoWorkflowClient interface {
	ExecuteWorkflow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientEvent, Action], error)
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error)
	ListFlows(ctx context.Context, in *ListFlowsRequest, opts ...grpc.CallOption) (*ListFlowsResponse, error)
}

type duoWorkflowClient struct {
	cc grpc.ClientConnInterface
}

func NewDuoWorkflowClient(cc grpc.ClientConnInterface) DuoWorkflowClient {
	return &duoWorkflowClient{cc}
}

func (c *duoWorkflowClient) ExecuteWorkflow(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientEvent, Action], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DuoWorkflow_ServiceDesc.Streams[0], DuoWorkflow_ExecuteWorkflow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientEvent, Action]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DuoWorkflow_ExecuteWorkflowClient = grpc.BidiStreamingClient[ClientEvent, Action]

func (c *duoWorkflowClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, DuoWorkflow_GenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duoWorkflowClient) ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListToolsResponse)
	err := c.cc.Invoke(ctx, DuoWorkflow_ListTools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duoWorkflowClient) ListFlows(ctx context.Context, in *ListFlowsRequest, opts ...grpc.CallOption) (*ListFlowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlowsResponse)
	err := c.cc.Invoke(ctx, DuoWorkflow_ListFlows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DuoWorkflowServer is the server API for DuoWorkflow service.
// All implementations must embed UnimplementedDuoWorkflowServer
// for forward compatibility.
type DuoWorkflowServer interface {
	ExecuteWorkflow(grpc.BidiStreamingServer[ClientEvent, Action]) error
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error)
	ListFlows(context.Context, *ListFlowsRequest) (*ListFlowsResponse, error)
	mustEmbedUnimplementedDuoWorkflowServer()
}

// UnimplementedDuoWorkflowServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDuoWorkflowServer struct{}

func (UnimplementedDuoWorkflowServer) ExecuteWorkflow(grpc.BidiStreamingServer[ClientEvent, Action]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteWorkflow not implemented")
}
func (UnimplementedDuoWorkflowServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedDuoWorkflowServer) ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTools not implemented")
}
func (UnimplementedDuoWorkflowServer) ListFlows(context.Context, *ListFlowsRequest) (*ListFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlows not implemented")
}
func (UnimplementedDuoWorkflowServer) mustEmbedUnimplementedDuoWorkflowServer() {}
func (UnimplementedDuoWorkflowServer) testEmbeddedByValue()                     {}

// UnsafeDuoWorkflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DuoWorkflowServer will
// result in compilation errors.
type UnsafeDuoWorkflowServer interface {
	mustEmbedUnimplementedDuoWorkflowServer()
}

func RegisterDuoWorkflowServer(s grpc.ServiceRegistrar, srv DuoWorkflowServer) {
	// If the following call pancis, it indicates UnimplementedDuoWorkflowServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DuoWorkflow_ServiceDesc, srv)
}

func _DuoWorkflow_ExecuteWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DuoWorkflowServer).ExecuteWorkflow(&grpc.GenericServerStream[ClientEvent, Action]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DuoWorkflow_ExecuteWorkflowServer = grpc.BidiStreamingServer[ClientEvent, Action]

func _DuoWorkflow_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuoWorkflowServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuoWorkflow_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuoWorkflowServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuoWorkflow_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuoWorkflowServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuoWorkflow_ListTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuoWorkflowServer).ListTools(ctx, req.(*ListToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuoWorkflow_ListFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuoWorkflowServer).ListFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuoWorkflow_ListFlows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuoWorkflowServer).ListFlows(ctx, req.(*ListFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DuoWorkflow_ServiceDesc is the grpc.ServiceDesc for DuoWorkflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DuoWorkflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DuoWorkflow",
	HandlerType: (*DuoWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _DuoWorkflow_GenerateToken_Handler,
		},
		{
			MethodName: "ListTools",
			Handler:    _DuoWorkflow_ListTools_Handler,
		},
		{
			MethodName: "ListFlows",
			Handler:    _DuoWorkflow_ListFlows_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteWorkflow",
			Handler:       _DuoWorkflow_ExecuteWorkflow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "contract/contract.proto",
}
